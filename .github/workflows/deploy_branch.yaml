
name: Build and deploy - Branch

on: 
  push:
    branches: [ '!main' ]

jobs:
  
  build_deploy:    
    name: Build and deploy image for test
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Extract branch name
      id: extract_branch
      run: echo "branch=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's/[:/]+/_/g')" >>$GITHUB_OUTPUT

    - name: Update tag value for branch name in helm chart
      uses: fjogeleit/yaml-update-action@main
      with:
        valueFile: 'deployment/dev.yaml'
        propertyPath: 'microservice.tag'
        value: dev-${{ steps.extract_branch.outputs.branch }}
        commitChange: false

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Get dev microservice name
      id: dev-values-name
      uses: jbutcher5/read-yaml@main
      with:
        file: './deployment/dev.yaml'         
        key-path: '["microservice", "name"]'  

    - name: Get dev microservice tag
      id: dev-values-tag
      uses: jbutcher5/read-yaml@main
      with:
        file: './deployment/dev.yaml'         
        key-path: '["microservice", "tag"]'  

    - name: Build, tag, and push qa image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ steps.qa-values-name.outputs.data }}
        IMAGE_TAG: ${{ steps.qa-values-tag.outputs.data }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Deploy to dev environment in Kubernetes
      id: deploy-k8s-dev
      run: |
        mkdir -p ~/.kube
        echo $KUBECONFIG_FILE > ~/.kube/config
        helm repo add $REPO_ALIAS $REPO
        helm upgrade --install $RELEASE $REPO_ALIAS/$CHART -f $VALUES
      env:
        KUBECONFIG_FILE: '${{ secrets.K8S_KUBECONFIG_FLASK_SAMPLE_DEV }}'
        REPO: ${{ vars.HELM_REPO }}
        REPO_ALIAS: ${{ vars.HELM_REPO_ALIAS }}
        RELEASE: ${{ steps.dev-values-name.outputs.data }}
        CHART: ${{ vars.HELM_CHART }}
        VALUES: 'deployment/dev.yaml'

    - name: Notify Slack
      if: failure() || success()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_USERNAME: Github Actions
        SLACK_ICON: https://img.icons8.com/?size=50&id=3tC9EQumUAuq&format=png
        SLACK_CHANNEL: ${{ vars.SLACK_CHANNEL }}
        SLACK_TITLE: Pipeline results
        SLACK_COLOR: ${{ job.status }}